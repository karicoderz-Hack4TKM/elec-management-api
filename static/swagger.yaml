openapi: 3.0.0
info:
  title: Electricity Management APIs
  version: '1.0'
  description: Critical APIs for functioning of Electricity Management APIs
servers:
  - url: /
    variables: {}

docExpansion : "none"

components:
  securitySchemes:
     API-TOKEN:
      type: apiKey
      in: header
      name: x-access-token

security:
  - API-TOKEN: []

tags:
  - name: Authorization
    description: Auth APIs
  - name: MDM
    description: Master Data Management APIs




paths:


  /userLogin:
    summary: User Login Function
    description: Used for logging the user into the application
    post:
      summary: User Login Function
      operationId: auth-user-login
      security: []
      description: >-
        Takes username & password, logs in the user & is successful, returns a
        user token, else shows rejection.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: HD01@gmail.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Login Successful
        '213':
          description: Failed to decrypt user password from Database
      tags: [Authorization]


  /forgotPassword:
    summary: User password Recovery
    description: Used for user password recovery
    post:
      summary: User password Recovery
      operationId: auth-user-recover
      security: []
      description: >-
        Takes username and sends the password recovery email to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: abc@xyz.com

      responses:
        '200':
          description: Success
      tags: [Authorization]

  /resetPassword:
    summary: Reset password Function
    description: Used for verifying jwt token and reseting user password

    get:
      summary: Verifies jwt token in password recovery url
      operationId: auth-user-reset-get
      description: >-
        Check whether the user is valid, if so return user_id along with message "valid user", else shows error
      responses:
        '200':
          description: Valid user
      tags: [Authorization]

    put:
      summary: Reset password
      operationId: auth-user-reset-put
      description: >-
        Takes id and password and then update the user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: 36b47079-ad71-46f5-891b-7b340b9c3271
                password:
                  type: string
                  example: "12345678"
      responses:
        '200':
          description: User Password Updated
      tags: [Authorization]














  # User role GET and POST Endpoints


  /mdm/userrole:
    summary: MDM-Userrole
    description: MDM Modules for Userrole

#GET Method

    get:
      summary: Get a list of all Userroles
      operationId: core-userrole
      description: >-
       This endpoints uses a get request to retrive all Userroles
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
      responses:
        '200':
          description: Data served
        '211':
          description: Not found or bad request
        '210':
          description: Failed to connect to Mongo DB
        '401':
          description: Unauthorized User

      tags: [MDM]

#POST Method


    post:
      summary: Insert Userrole data
      operationId: core-add-userrole
      description: >-
        <h3>This endpoints uses a post request to  Insert all userroles </h3>.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: RO101
                name:
                  type: string
                  example: Lab-incharge
                code:
                  type: string
                  example: LIN


      responses:
        '201':
          description: Userrole is created
        '211':
          description: Userrole is not inserted
        '210':
          description: Failed to connect to Mongo DB
        '401':
          description: Unauthorized User
      tags: [ CORE ]

# generator

    /core/users:
      summary: MDM-generator
      description: MDM Modules for users

      # GET Method
      get:
        summary: Fetch generator details
        operationId: core-generator-get
        description: >-
          Fetches generator data from database.
        parameters:
          - name: filter
            in: query
            description: Filter Query
            schema:
              type: string
              example: { "_id": "GE01" }
        responses:
          '200':
            description: Success
          '400':
            description: Not found or bad request
          '500':
            description: Failed to connect to Mongo DB

        tags: [ CORE ]

      # Put Method

      put:
        summary: .
        operationId: core-generators-put
        description: >-
          update generator details
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                    example: GE01
                  maxicap:
                    type: integer
                    example: password
                  totaltime:
                    type: integer
                    example: 101
                  startTime:
                    type: string
                    example: 19-08-08
                  endTime:
                    type: string
                    example: 23-09-w0
        responses:
          '200':
            description: update generator data
          '201':
            description: data  is not updated
          '500':
            description: Failed to connect to Mongo DB

        tags: [ CORE ]




  # User GET,POST,DELETE,PUT Endpoints added

  /core/users:
    summary: CORE-users
    description: CORE Modules for users

# GET Method
    get:
      summary: Fetch users data.
      operationId: core-users-get
      description: >-
        Fetches users data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: {"email":"elec@gmail.com"}
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request
        '500':
          description: Failed to connect to Mongo DB

      tags: [ CORE ]

# POST Method

    post:
      summary: Insert users data.
      operationId: core-users-post
      description: >-
        Inserts users data into database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: elec@gmail.com
                password:
                  type: string
                  example: password
                lanenumber:
                  type: integer
                  example: 101
                usertype:
                  type: string
                  example: HH
      responses:
        '200':
          description: User data created
        '201':
          description: User data  is not create
        '500':
          description: Failed to connect to Mongo DB

      tags: [ CORE ]


# User GET,POST,DELETE,PUT Endpoints added

  /core/tariff:
    summary: Core Tariff
    description: Core Modules for tariff

# GET Method
    get:
      summary: Fetch users data.
      operationId: core-users-get
      description: >-
        Fetches tariff data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: {"type":"domestic"}
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request
        '500':
          description: Failed to connect to Mongo DB
      tags: [ CORE ]

# POST Method

    post:
      summary: Insert tariff data.
      operationId: core-tariff-post
      description: >-
        Inserts tariff data into database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: domestic
                threshold:
                  type: int
                  example: 250
                price:
                  type: int
                  example: 5

      responses:
        '200':
          description: User data created
        '201':
          description: User data  is not create
        '500':
          description: Failed to connect to Mongo DB
      tags: [ CORE ]

    delete:
      summary: Delete users data.
      operationId: core-users-delete
      description: >-
          Derlete tariff data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: { "type": "domestic" }
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request

        '500':
          description: Failed to connect to Mongo DB

      tags: [ CORE ]

  /core/consumption:
    summary: Core Consumption
    description: Core Modules for Consumption

    # GET Method
    get:
      summary: Fetch users data.
      operationId: core-users-get
      description: >-
        Fetches consumption data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: {"userid": "HP01" }
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request
        '500':
          description: Failed to connect to Mongo DB
      tags: [ CORE ]

  /core/production:
    summary: Core Production
    description: Core Modules for Production

    # GET Method
    get:
      summary: Fetch users data.
      operationId: core-users-get
      description: >-
        Fetches prouction data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: { "userid": "HP01" }
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request
        '500':
          description: Failed to connect to Mongo DB
      tags: [ CORE ]


  /core/excess:
    summary: Core Excess
    description: Core Modules for Excess

    # GET Method
    post:
      summary: Insert excess data.
      operationId: core-excess-post
      description: >-
        Inserts excess data into database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: permenant
                status:
                  type: boolean
                  example: True
                reason:
                  type: string
                  example: permanant data
                start_date:
                  type: string
                  example: 09-09-1998
                end_date:
                    type: string
                    example: 09-10-1998

      responses:
        '200':
          description: User data created
        '201':
          description: User data  is not create
        '500':
          description: Failed to connect to Mongo DB
      tags: [ CORE ]


#Providers get

  /core/providers:
    summary: CORE-providers
    description: CORE Modules for providers

    # GET Method
    get:
      summary: Fetch providers data.
      operationId: core-providers-get
      description: >-
        Fetches providers data from database.
      parameters:
        - name: filter
          in: query
          description: Filter Query
          schema:
            type: string
            example: { "email": "elec@gmail.com" }
      responses:
        '200':
          description: Success
        '400':
          description: Not found or bad request
        '500':
          description: Failed to connect to Mongo DB

      tags: [ CORE ]
##DELETE Method
#
#    delete:
#      summary: Deletes a user
#      operationId: core-users-delete
#      description: >-
#        Deletes user data from database.
#      parameters:
#        - name: filter
#          in: query
#          description: Filter Query
#          schema:
#            type: string
#      responses:
#        '200':
#          description: User Delete
#
#        '212':
#          description: User Not Found
#        '213':
#          description: No User Available
#        '211':
#          description: Not found or bad request
#        '210':
#          description: Failed to connect to Mongo DB
#        '401':
#          description: Unauthorized User
#      tags: [ MDM ]
#
#
##PUT Method
#
#
#    put:
#      summary: Updates users data.
#      operationId: core-users-put
#      description: >-
#        Updates users data into database.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                _id:
#                  type: string
#                  example: 86f402d9-fd3a-40ca-82ea-214d816d1124
#                email:
#                  type: string
#                  example: unknown@example.com
#                password:
#                  type: string
#                  example: password
#                username:
#                  type: string
#                  example: New User
#                userRole:
#                  type: string
#                  example: RO101
#                subDepartment:
#                  type: string
#                  example: CA
#      responses:
#        '200':
#          description: User Data Updated
#
#        '211':
#          description: User Data Not Updated
#        '212':
#          description: User Not Found
#        '213':
#          description: Not found or bad request
#        '210':
#          description: Failed to connect to Mongo DB
#        '401':
#          description: Unauthorized User
#
#      tags: [ MDM ]











